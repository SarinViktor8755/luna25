   // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('DOMContentLoaded', function() {
            updateInfo();
            updateEventsInfo();
            animateNameLetters();
            startHeartAnimation();
            initSlideshow();
            lazyLoadImages();
            createFloatingElements();
            setupScrollListener();
            setupNavbarScroll();
            showAllTexts(); // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤
        });

        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–µ–∫—Å—Ç—ã –ø–æ–¥ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
        function showAllTexts() {
            const texts = document.querySelectorAll('.anniversary-text');
            texts.forEach(text => {
                text.style.opacity = '1';
                text.style.transform = 'translateY(0)';
            });
        }

        // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
   // –í —Ñ—É–Ω–∫—Ü–∏–∏ openModal
function openModal(imgSrc, text) {
    const modal = document.getElementById('modalOverlay');
    const modalImg = document.getElementById('modalImage');
    const modalText = document.getElementById('modalText');
    const navbar = document.querySelector('.navbar');
    
    modalImg.src = imgSrc;
    modalText.textContent = text;
    modal.classList.add('active');
    document.body.style.overflow = 'hidden';
    
    navbar.style.opacity = '0';
    navbar.style.pointerEvents = 'none';
    navbar.style.transition = 'opacity 0.3s ease';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ —Å–∞–º–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    modalImg.onclick = function(e) {
        e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ, —á—Ç–æ–±—ã –∫–ª–∏–∫ –Ω–∞ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–ª –æ–∫–Ω–æ
        closeModal();
    };
    
    createConfetti();
}

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
document.getElementById('modalOverlay').onclick = function(e) {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª–∏–∫ –Ω–µ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –º–æ–¥–∞–ª–∫–∏
    if (e.target === this) {
        closeModal();
    }
};
// –ò–∑–º–µ–Ω–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è closeModal
function closeModal() {
    const modal = document.getElementById('modalOverlay');
    const navbar = document.querySelector('.navbar');
    
    modal.classList.remove('active');
    document.body.style.overflow = 'auto';
    navbar.style.opacity = '1';
    navbar.style.pointerEvents = 'auto';
    
    // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–ª–∏—Å—å
    const modalImg = document.getElementById('modalImage');
    modalImg.onclick = null;
}

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ ESC
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                closeModal();
            }
        });

        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–≤–∞—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ–Ω–∞
        function createFloatingElements() {
            const container = document.querySelector('.floating-elements');
            const colors = ['rgba(255, 204, 0, 0.1)', 'rgba(255, 102, 153, 0.1)', 'rgba(174, 17, 203, 0.1)', 'rgba(75, 98, 137, 0.1)'];
            
            for (let i = 0; i < 8; i++) {
                const element = document.createElement('div');
                element.className = 'floating-element';
                
                const size = Math.random() * 100 + 50;
                const posX = Math.random() * 100;
                const posY = Math.random() * 100;
                const delay = Math.random() * 8;
                const duration = Math.random() * 10 + 10;
                const color = colors[Math.floor(Math.random() * colors.length)];
                
                element.style.width = `${size}px`;
                element.style.height = `${size}px`;
                element.style.top = `${posY}%`;
                element.style.left = `${posX}%`;
                element.style.animationDelay = `${delay}s`;
                element.style.animationDuration = `${duration}s`;
                element.style.backgroundColor = color;
                
                container.appendChild(element);
            }
        }

        // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–¥–µ—á–µ–∫
        function createHeart() {
            const heart = document.createElement('div');
            const heartTypes = ['‚ù§Ô∏è', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú', 'ü§é', 'üñ§', 'ü§ç', 'üíñ', 'üíó', 'üíì', 'üíû', 'üíï'];
            heart.innerHTML = heartTypes[Math.floor(Math.random() * heartTypes.length)];
            heart.classList.add('heart-bubble');
            
            const colors = ['#ff6699', '#ff3366', '#ff0066', '#ff99cc', '#ff66b3', '#ffcc00', '#ff9933'];
            const randomColor = colors[Math.floor(Math.random() * colors.length)];
            heart.style.color = randomColor;
            
            const x = Math.random() * window.innerWidth;
            heart.style.left = `${x}px`;
            heart.style.bottom = '0';
            
            const size = Math.random() * 20 + 40;
            heart.style.fontSize = `${size}px`;
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
            heart.style.transform = `translateX(${Math.random() * 100 - 50}px)`;
            
            document.body.appendChild(heart);
            
            setTimeout(() => {
                heart.remove();
            }, 3000);
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–¥–µ—á–µ–∫
        function startHeartAnimation() {
            createHeart();
            const nextInterval = Math.random() * 300 + 100;
            setTimeout(startHeartAnimation, nextInterval);
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
        function createConfetti() {
            const colors = ['#ffcc00', '#ff6699', '#66ccff', '#99ff66', '#ff9933'];
            
            for (let i = 0; i < 50; i++) {
                const confetti = document.createElement('div');
                confetti.className = 'confetti';
                
                const color = colors[Math.floor(Math.random() * colors.length)];
                const size = Math.random() * 10 + 5;
                const left = Math.random() * 100;
                const animationDuration = Math.random() * 3 + 2;
                
                confetti.style.backgroundColor = color;
                confetti.style.width = `${size}px`;
                confetti.style.height = `${size}px`;
                confetti.style.left = `${left}%`;
                confetti.style.animationDuration = `${animationDuration}s`;
                
                document.body.appendChild(confetti);
                
                setTimeout(() => {
                    confetti.remove();
                }, animationDuration * 1000);
            }
        }

        // –ê–Ω–∏–º–∞—Ü–∏—è –±—É–∫–≤ –∏–º–µ–Ω–∏ "–í–∞–ª–µ—Ä–∏—è"
        function animateNameLetters() {
            const name = "–í–∞–ª–µ—Ä–∏—è";
            const nameLettersContainer = document.getElementById('name-letters');
            
            name.split('').forEach((letter, index) => {
                const span = document.createElement('span');
                span.className = 'letter';
                span.textContent = letter;
                span.style.animation = `snake 2s ${index * 0.2}s infinite ease-in-out`;
                nameLettersContainer.appendChild(span);
            });
        }

        // –°–ª–∞–π–¥-—à–æ—É
        function initSlideshow() {
            const slideshow = document.getElementById('slideshow');
            let currentIndex = 0;

            function showNextImage() {
                const currentImage = slideshow.querySelector('.active');
                if (currentImage) {
                    currentImage.classList.remove('active');
                }

                currentIndex = (currentIndex + 1) % slideshow.children.length;
                const nextImage = slideshow.children[currentIndex];
                nextImage.classList.add('active');
            }

            setInterval(showNextImage, 3000);
        }

        // –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–æ—è–≤–ª–µ–Ω–∏—è
        function lazyLoadImages() {
            const lazyImages = [].slice.call(document.querySelectorAll('img[loading="lazy"], img[data-src]'));
            
            if ('IntersectionObserver' in window) {
                const lazyImageObserver = new IntersectionObserver(function(entries, observer) {
                    entries.forEach(function(entry) {
                        if (entry.isIntersecting) {
                            const lazyImage = entry.target;
                            
                            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                            if (lazyImage.dataset.src) {
                                lazyImage.src = lazyImage.dataset.src;
                                delete lazyImage.dataset.src;
                            }
                            
                            // –£–¥–∞–ª—è–µ–º placeholder
                            const placeholder = lazyImage.nextElementSibling;
                            if (placeholder && placeholder.classList.contains('placeholder')) {
                                setTimeout(() => {
                                    placeholder.style.opacity = '0';
                                    setTimeout(() => {
                                        placeholder.remove();
                                    }, 500);
                                }, 300);
                            }
                            
                            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å loaded –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è
                            lazyImage.onload = function() {
                                lazyImage.classList.add('loaded');
                            };
                            
                            lazyImageObserver.unobserve(lazyImage);
                        }
                    });
                }, {
                    rootMargin: '200px 0px'
                });

                lazyImages.forEach(function(lazyImage) {
                    lazyImageObserver.observe(lazyImage);
                });
            } else {
                // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ IntersectionObserver
                lazyImages.forEach(function(lazyImage) {
                    if (lazyImage.dataset.src) {
                        lazyImage.src = lazyImage.dataset.src;
                        lazyImage.onload = function() {
                            lazyImage.classList.add('loaded');
                        };
                    }
                });
            }
        }
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –ø—É–Ω–∫—Ç (–¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
        document.querySelectorAll('.nav-link').forEach(link => {
            link.addEventListener('click', () => {
                const navbar = document.getElementById('navbarNav');
                if (navbar.classList.contains('show')) {
                    $('.navbar-toggler').click(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
                }
            });
        });

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–≤–µ—Ä—Ö"
        function setupScrollListener() {
            const backToTopButton = document.getElementById('backToTop');
            
            window.addEventListener('scroll', function() {
                if (window.pageYOffset > 300) {
                    backToTopButton.classList.add('visible');
                } else {
                    backToTopButton.classList.remove('visible');
                }
            });
            
            backToTopButton.addEventListener('click', function() {
                window.scrollTo({
                    top: 0,
                    behavior: 'smooth'
                });
            });
        }

        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–≤–±–∞—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
        function setupNavbarScroll() {
            const navbar = document.querySelector('.navbar');
            
            window.addEventListener('scroll', function() {
                if (window.scrollY > 50) {
                    navbar.classList.add('scrolled');
                } else {
                    navbar.classList.remove('scrolled');
                }
            });
        }

        // –†–∞—Å—á–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
        const birthDate = new Date('2025-03-14T10:15:00');

        function calculateAge(birthDate) {
            const now = new Date();
            let years = now.getFullYear() - birthDate.getFullYear();
            let months = now.getMonth() - birthDate.getMonth();
            let days = now.getDate() - birthDate.getDate();
            let hours = now.getHours() - birthDate.getHours();
            let minutes = now.getMinutes() - birthDate.getMinutes();
            let seconds = now.getSeconds() - birthDate.getSeconds();
            
            if (seconds < 0) {
                minutes--;
                seconds += 60;
            }
            if (minutes < 0) {
                hours--;
                minutes += 60;
            }
            if (hours < 0) {
                days--;
                hours += 24;
            }
            if (days < 0) {
                months--;
                days += new Date(now.getFullYear(), now.getMonth(), 0).getDate();
            }
            if (months < 0) {
                years--;
                months += 12;
            }
            
            return { years, months, days, hours, minutes, seconds };
        }

        // –†–∞—Å—á–µ—Ç –¥–Ω–µ–π –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        function getDaysUntilBirthday(birthday) {
            const today = new Date();
            today.setHours(0, 0, 0, 0); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –Ω–∞—á–∞–ª–æ –¥–Ω—è
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É
            let nextBirthday = new Date(today.getFullYear(), birthday.getMonth(), birthday.getDate());
            
            // –ï—Å–ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —ç—Ç–æ–º –≥–æ–¥—É —É–∂–µ –ø—Ä–æ—à–µ–ª, –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
            if (today > nextBirthday) {
                nextBirthday = new Date(today.getFullYear() + 1, birthday.getMonth(), birthday.getDate());
            }
            
            // –†–∞–∑–Ω–∏—Ü–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            const diffTime = nextBirthday - today;
            
            // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –¥–Ω–∏ (–æ–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö)
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            
            return diffDays;
        }

        // –†–∞—Å—á–µ—Ç –¥–Ω–µ–π –¥–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        function calculateDaysToEvents(birthDate) {
            const now = new Date();
            const currentYear = now.getFullYear();
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
            const daysToBirthday = getDaysUntilBirthday(birthDate);
            
            // –î–æ 5 –ª–µ—Ç
            const fiveYearsDate = new Date(birthDate.getFullYear() + 5, birthDate.getMonth(), birthDate.getDate());
            const daysTo5Years = Math.floor((fiveYearsDate - now) / (1000 * 60 * 60 * 24));
            
            // –î–æ —à–∫–æ–ª—ã (7 –ª–µ—Ç)
            const schoolDate = new Date(birthDate.getFullYear() + 7, 8, 1); // 1 —Å–µ–Ω—Ç—è–±—Ä—è —á–µ—Ä–µ–∑ 7 –ª–µ—Ç
            const daysToSchool = Math.floor((schoolDate - now) / (1000 * 60 * 60 * 24));
            
            // –î–æ 10 –ª–µ—Ç
            const tenYearsDate = new Date(birthDate.getFullYear() + 10, birthDate.getMonth(), birthDate.getDate());
            const daysTo10Years = Math.floor((tenYearsDate - now) / (1000 * 60 * 60 * 24));
            
            // –î–æ 18 –ª–µ—Ç
            const eighteenYearsDate = new Date(birthDate.getFullYear() + 18, birthDate.getMonth(), birthDate.getDate());
            const daysTo18Years = Math.floor((eighteenYearsDate - now) / (1000 * 60 * 60 * 24));
            
            // –î–æ –ø–µ–Ω—Å–∏–∏ (–∂–µ–Ω—â–∏–Ω—ã - 60 –ª–µ—Ç)
            const retirementDate = new Date(birthDate.getFullYear() + 60, birthDate.getMonth(), birthDate.getDate());
            const daysToRetirement = Math.floor((retirementDate - now) / (1000 * 60 * 60 * 24));
            
            return {
                daysToBirthday,
                daysTo5Years,
                daysToSchool,
                daysTo10Years,
                daysTo18Years,
                daysToRetirement
            };
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—É–ø–∏–≤—à–∏—Ö —Å–æ–±—ã—Ç–∏–π
        function updateProgressBar(barId, daysRemaining, totalDays, eventName) {
            const progressBar = document.getElementById(barId);
            const container = progressBar.parentElement;
            const textElement = container.previousElementSibling;
            
            // –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ —É–∂–µ –ø—Ä–æ—à–ª–æ (–¥–Ω–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ)
            if (daysRemaining <= 0) {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
                switch(barId) {
                    case 'progressBarSchool':
                        textElement.innerHTML = `<span class="emoji">üìö</span> –®–∫–æ–ª–∞: <span class="highlight">–£–∂–µ –≤ —à–∫–æ–ª–µ!</span>`;
                        break;
                    case 'progressBar5':
                        textElement.innerHTML = `<span class="emoji">üéà</span> 5 –ª–µ—Ç: <span class="highlight">–£–∂–µ –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å!</span>`;
                        break;
                    case 'progressBar10':
                        textElement.innerHTML = `<span class="emoji">üåü</span> 10 –ª–µ—Ç: <span class="highlight">–£–∂–µ –µ—Å—Ç—å!</span>`;
                        break;
                    case 'progressBar18':
                        textElement.innerHTML = `<span class="emoji">üéâ</span> 18 –ª–µ—Ç: <span class="highlight">–£–∂–µ –≤–∑—Ä–æ—Å–ª—ã–π!</span>`;
                        break;
                    case 'progressBarRetirement':
                        textElement.innerHTML = `<span class="emoji">üëµ</span> –ü–µ–Ω—Å–∏—è: <span class="highlight">–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –±–∞–±—É—à–∫–∞!</span>`;
                        break;
                    case 'progressBarYear':
                        textElement.innerHTML = `<span class="emoji">üéÇ</span> –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: <span class="highlight">–°–µ–≥–æ–¥–Ω—è!</span>`;
                        break;
                    default:
                        textElement.innerHTML = textElement.innerHTML.replace("–î–æ", "–£–∂–µ");
                }
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –∑–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç
                progressBar.style.width = '100%';
                container.classList.add('complete');
                
                // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –¥–ª—è –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏—è
                if (barId === 'progressBarYear') {
                    createConfetti();
                }
            } else {
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                const percentage = 100 - (daysRemaining / totalDays * 100);
                progressBar.style.width = `${percentage}%`;
                container.classList.remove('complete');
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ
                switch(barId) {
                    case 'progressBarSchool':
                        textElement.innerHTML = `<span class="emoji">üìö</span> –î–æ —à–∫–æ–ª—ã: <span class="highlight">${daysRemaining} –¥–Ω–µ–π</span>`;
                        break;
                    case 'progressBar5':
                        textElement.innerHTML = `<span class="emoji">üéà</span> –î–æ 5-–ª–µ—Ç–∏—è: <span class="highlight">${daysRemaining} –¥–Ω–µ–π</span>`;
                        break;
                    case 'progressBar10':
                        textElement.innerHTML = `<span class="emoji">üåü</span> –î–æ 10-–ª–µ—Ç–∏—è: <span class="highlight">${daysRemaining} –¥–Ω–µ–π</span>`;
                        break;
                    case 'progressBar18':
                        textElement.innerHTML = `<span class="emoji">üéâ</span> –î–æ 18-–ª–µ—Ç–∏—è: <span class="highlight">${daysRemaining} –¥–Ω–µ–π</span>`;
                        break;
                    case 'progressBarRetirement':
                        textElement.innerHTML = `<span class="emoji">üëµ</span> –î–æ –ø–µ–Ω—Å–∏–∏: <span class="highlight">${daysRemaining} –¥–Ω–µ–π</span>`;
                        break;
                    case 'progressBarYear':
                        textElement.innerHTML = `<span class="emoji">üéÇ</span> –î–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è: <span class="highlight">${daysRemaining} –¥–Ω–µ–π</span>`;
                        break;
                }
            }
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–Ω—è—Ö –¥–æ —Å–æ–±—ã—Ç–∏–π
        function updateEventsInfo() {
            const events = calculateDaysToEvents(birthDate);
            
            // –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
            updateProgressBar('progressBarYear', events.daysToBirthday, 365, '–î–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è');
            
            // –î–æ 5 –ª–µ—Ç
            updateProgressBar('progressBar5', events.daysTo5Years, 5 * 365, '–î–æ 5-–ª–µ—Ç–∏—è');
            
            // –î–æ —à–∫–æ–ª—ã
            updateProgressBar('progressBarSchool', events.daysToSchool, 7 * 365, '–î–æ —à–∫–æ–ª—ã');
            
            // –î–æ 10 –ª–µ—Ç
            updateProgressBar('progressBar10', events.daysTo10Years, 10 * 365, '–î–æ 10-–ª–µ—Ç–∏—è');
            
            // –î–æ 18 –ª–µ—Ç
            updateProgressBar('progressBar18', events.daysTo18Years, 18 * 365, '–î–æ 18-–ª–µ—Ç–∏—è');
            
            // –î–æ –ø–µ–Ω—Å–∏–∏ (60 –ª–µ—Ç –¥–ª—è –∂–µ–Ω—â–∏–Ω)
            updateProgressBar('progressBarRetirement', events.daysToRetirement, 60 * 365, '–î–æ –ø–µ–Ω—Å–∏–∏');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            setTimeout(updateEventsInfo, 60000);
        }

        function updateInfo() {
            const age = calculateAge(birthDate);
            document.getElementById('age').innerHTML = `<span class="emoji">üë∂</span> –í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞: <span class="highlight"><br>${age.years} –ª–µ—Ç, ${age.months} –º–µ—Å—è—Ü–µ–≤, ${age.days} –¥–Ω–µ–π</span><br>${age.hours} —á–∞—Å–æ–≤, ${age.minutes} –º–∏–Ω—É—Ç, ${age.seconds} —Å–µ–∫`;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            setTimeout(updateInfo, 1000);
        }